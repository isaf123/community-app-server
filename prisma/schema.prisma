// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id      Int       @id @default(autoincrement())
  username     String
  password     String
  name         String
  create_date  String?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  login_failed Int       @default(0)
  post         Post[]
  like         Like[]
  comment      Comment[]

  @@map("users")
}

model Admin {
  admin_id   Int      @id @default(autoincrement())
  adminname  String
  password   String
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("admin")
}

model Post {
  post_id     Int       @id @default(autoincrement())
  user_id     Int
  title       String
  content     String
  tags        String
  create_date String?
  created_at  DateTime  @default(now())
  User        User      @relation(fields: [user_id], references: [user_id])
  Comment     Comment[]
  Like        Like[]

  @@map("post")
}

model Comment {
  comment_id Int      @id @default(autoincrement())
  user_id    Int
  post_id    Int
  content    String
  created_at DateTime @default(now())
  Post       Post     @relation(fields: [post_id], references: [post_id], onDelete: Cascade)
  Like       Like[]
  User       User     @relation(fields: [user_id], references: [user_id])

  @@map("comment")
}

model Like {
  like_id    Int      @id @default(autoincrement())
  user_id    Int
  post_id    Int?
  created_at DateTime @default(now())
  comment_id Int?
  Post       Post?    @relation(fields: [post_id], references: [post_id], onDelete: Cascade)
  Comment    Comment? @relation(fields: [comment_id], references: [comment_id], onDelete: Cascade)
  User       User     @relation(fields: [user_id], references: [user_id])

  @@map("postlike")
}

model Tags {
  tags_id    Int      @id @default(autoincrement())
  tag        String
  created_at DateTime @default(now())

  @@map("tags")
}
